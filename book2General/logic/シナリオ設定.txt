/**
 * @title Scenario
 * @author Oshika
 * @date 2020-09-23
*/

/*
■BattleGameScenario シナリオ
◆シナリオ・ターン制と今後の展望
シナリオ・ターン制とは、動的な進行状況の時間を区切り、各シーン別に状況設定していく進め方です。
これにより、当初に目指していたＡＩ的な要素は薄くなり、すべてがイベント化してしまい、
開発者が意図していた動的状況での戦略的思考や状況判断というものはなくなり、
開発者があらかじめ設定したストーリーを再現していく紙芝居のようなものになってしまう。
ＡＩというには程遠いものだが、これがＡＩ開発への第一歩になるだろう。

コードをテストする場合、最初は固定値を与えて意図通り動作するかチェックするように、
このシナリオ・ターン制は、いわばストーリーの固定値でありましょう。
確かにシミュレーションとしての面白さは欠くのですが、これもＡＩ化へのひとつの道程、最初の一歩でもあります。

具体的に このアプリで言うと、最初は「Scene１(シーン１): 開戦」として
両軍の必要な陣形をあらかじめ設定し、そこでの戦闘計算を行い、それを表示して、
次のScene(シーン)に移行する形でアプリが進行する。

戦闘計算の結果も、こちらが意図した結果になるよう調整してしまうので、まさに紙芝居ですが、
今後の発展要素として、戦闘結果によってシナリオの分岐をさせたらシミュレーションらしくなる。
戦闘結果も毎回同じではなく、条件次第では違う結果にならないとシナリオ分岐させる意味がない。

その後に、プレイヤーの操作による陣形配置と、ＮＰＣ(コンピューター思考)による陣形変化までいくと、
やっとゲームらしくなって「プレイヤーは どう攻め、どう守れば勝てるのか」を模索する戦略ゲームになっていく。
さらにＨｅｘ戦(六角形のマス目)による移動要素、部隊の正面・側面や背面、
その部隊が何方向の敵と対峙しているかという隣接関係などを考慮した戦闘計算までいくと、
より実際に近い状況を再現できるようになる。それに伴いＨｅｘ戦でのＡＩによる戦術的思考というのは、
とても難しい課題で、シミュレーション・ゲームの老舗である あのＫＯＥＩさんですら未だに実装できていない。
大将や勝利条件に向かって まっしぐらに進むだけの単純ＡＩだと、
戦術思考を愛するプレイヤーには飽きられてしまう。(私のこと)
そういう戦術愛好家が戦術ＡＩの開発をしたら、面白いものができるのではなかろうか。

今後の展望をまとめると、まずは固定値としてのテスト「シナリオ・ターン制」(固定陣形)。
次に「シナリオ分岐」->「プレイヤーによる陣形配置」->「ＮＰＣによる陣形配置」
->「Ｈｅｘ戦で移動の概念を導入」->「Ｈｅｘ戦での戦闘計算」->「Ｈｅｘ戦でのプレイヤー操作」
->「Ｈｅｘ戦での戦術思考ＡＩ」->「学習するＡＩによる自律思考」と進む。


◆シナリオ設定の戦史的背景
まずは今回の「姉川の戦い紙芝居」のシナリオ設定をして行こう。

その前に簡単に実際の戦史上の「姉川の戦い」について おさらいしておく。
この合戦に到るまでの戦略的背景を語ると本稿の範囲を逸脱して長話になってしまうので、
そこは割愛して、単純に戦史としての戦術的(軍事的)解説に留める。
※[reference.姉川合戦.jpg]に陣形のわかる画像を何枚か貼ってあるので、それを参照してください。

この合戦は兵力劣勢の「浅井・朝倉勢の攻勢」から始まる。兵数は後世の史家の研究で算出した推定数で、
当時、正確にそれを把握していたかどうかは不明だが、織田勢の陣容からして、先鋒に坂井と池田という大将は
初めから攻勢に出る気はなさそうな配置である。せっかく相手を野戦に引き出すことに成功したのに
早期に相手を逃げ散らせてしまうのは得策ではない。それと、後述するように徳川勢の敗走を計算に入れた
戦術的配慮から織田勢の初期守勢という方針を決めたと思われる。

古代支那の兵法に「半渡」という定石があり「半ば渡らせて討つ」という意味。
織田勢の采配は まさにこれで、先に浅井・朝倉勢に渡河攻勢を仕掛けさせ、実際に織田勢の先鋒と次陣は崩されて
初戦の旗色だけを見ると、浅井・朝倉勢の勝勢という見方をこの戦場にいた者は誰しもそう思ったであろう。

その後、戦線は膠着し、徳川方から榊原康政の騎兵迂回による朝倉勢側面への突撃によって、
朝倉勢は総崩れとなり、友軍崩壊によって浅井勢も危うくなり、浅井・朝倉勢の敗走で勝敗を決する。

徳川勢が5000と異様に少ないのは、三河・遠江の守りを重厚にして徳川家康が援軍出征してきたためで、
当時、隣国の武田信玄は存命で境を接していたので、信長も了承せざるを得なかったであろう。
それにしても、あまりの寡兵(少ない兵数)に信長も増援を提案したが、家康は稲葉貞通 約1000のみを借り、後方に配置した。

徳川勢が寡兵のために崩れて敗走すると、浅井・朝倉勢の両軍を織田勢で正面と側面に受け支えなければならず、
織田勢が初期攻勢に出れなかったのは、徳川勢の敗走を計算に入れてのことであろうし、
柴田を徳川後方の予備隊として残置していたのもそれであろう。

どちらの側にも「勝てる見込み」がないと城に退いてしまって野戦にはならない。
浅井・朝倉の勝利プランも「寡兵の徳川勢を約２倍の朝倉勢で蹴散らし、両軍で織田勢を攻め上げれば
必勝 間違いなし」と思ったであろう。そうでなければ劣勢の浅井・朝倉勢が攻勢に出る意味が解らぬ。

更に浅井・朝倉勢の気を良くした要因として、当時 商業地であった尾張兵(織田勢)の弱さは知られていて、
「尾張兵なら我が兵(浅井・朝倉勢)の1.5倍ぐらいで、ちょうど対等だわ」と言ったかどうか・・
ちなみに、この種の戦術的思考を幕末の西南戦争(薩摩方)や大東亜戦争(日本方)も行い、
いわば、日本人の戦術的な典型思考として定着してしまう。

だが実際は徳川勢の三河兵が異様な強さを発揮し、朝倉勢を支えて膠着させ、前述のように別働隊を出して
勝敗を決してしまうのだが・・

オプション・イベントで用意した「丹羽支隊の援軍」は丹羽長秀の配置は、画像資料によって違うが
後方の横山城を持ち、氏家・安藤の伏兵を用意していた織田勢は、戦闘が膠着した半ばに、これらの援軍を
浅井方側面に展開し、初戦の攻勢で疲れた浅井勢を一気に崩して勝敗を決めるための伏兵であろうと思われる。


◆シナリオ設定
プログラムの話に戻そう。[view.Manipulus][view.BattleGameView]において、
軍団の各Divisionインスタンスをリストにした List<Division>とindexを渡すと、
侍大将の名前の付いた■■■マークの駒とテキストデータが生成されるクラスを作ってあるので
ここでは、各Scene(シーン)やTurnでの出場武将を決め、その配置を設定すれば良い。

＊Scene１: 開戦、浅井・朝倉勢の渡河攻勢
    北部戦線: (浅井勢) 宮部継潤、阿閉貞秀
              (織田勢) 佐久間信盛
    南部戦線: (朝倉勢) 朝倉景鏡
              (徳川勢) 酒井忠次

＊Scene２: 織田勢先鋒の崩壊
    北部戦線: (浅井勢) 宮部継潤、阿閉貞秀
              (織田勢) 池田恒興
    南部戦線: (朝倉勢) 朝倉景鏡、前波吉継
              (徳川勢) 酒井忠次、本多忠勝

＊Scene３:
    北部戦線: (浅井勢) 〇磯野員昌
              (織田勢) 明智光秀、木下秀吉
    南部戦線: (朝倉勢) 真柄直隆、朝倉景紀
              (徳川勢) 酒井忠次、本多忠勝

＊Scene４:


＊Scene５: 榊原康政の騎馬突撃
    北部戦線: (浅井勢) 〇磯野員昌
              (織田勢) 明智光秀、木下秀吉
    南部戦線: (朝倉勢) 朝倉景健、真柄直隆
              (徳川勢) 酒井忠次、本多忠勝

    南部側面: (朝倉勢) 朝倉景健
              (徳川勢) 榊原康政

＊Scene６: 朝倉敗走


シーン３～４は戦闘結果によるシナリオ分岐をせねばならず、あらかじめ決められないようだ。
今回のアプリ制作では、Scene１とScene５のみ実装しよう。


◆コードへの実装 (％の数字は現時点2020-09-23での完成度)

[book2General.BattleGame.main()] 5％ 各軍団のインスタンスをリストで生成。
    ┗[corps.AzaiCorps] 90％
    ┗[corps.OdaCorps] 90％
    ┗[corps.AsakuraCorps] 未実装
    ┗[coros.TokugawaCorps] 未実装
        ┗[corps.Division] 90％
        ┗[corps.SakakibaraDivision] 未実装

  ↓ List<Division>

[logic.Scenario] 未実装 / 軍団リストを渡してシナリオによって indexを決定。

  ↓ List<Division>
  ↓ index

[view.BattleGameView] 55％ これで初期表示完了
    ┗[view.Manipulus] 90％

  ↓
「開始ボタン」
  ↓

[logic.BattleLogic] 未実装 / 戦闘開始、計算結果を[view.BattleGameView] へ戻す

  ↓↑ -> Division潰走で次のシーンへ

[view.BattleGameView]


