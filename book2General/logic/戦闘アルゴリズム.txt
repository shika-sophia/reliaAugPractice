/**
 * @title logic / 戦闘アルゴリズム.txt
 * @content 戦闘計算の考え方をテキストファイルで整理
 *
 * @author Oshika
 * @date 2020-09-26
*/

■戦闘アルゴリズム
◆概要
たくさんの戦闘用パラメーターを思いつくまま用意したが、
まずは単純化した小規模のモデルから始めて、これがある程度できてから
徐々に機能を拡張していこうと思う。

最初に扱うのは「兵士数」「士気」で、まずは これの増減アルゴリズムを考えて行こう。

＊兵士数と士気 ーー デフォルトで与えられて、戦闘に際し徐々に減少していく変数。
某大手シミュレーション・ゲームのように、最後の一兵まで、兵士数０まで戦うというのは現実的ではない。
実際は部隊の士気が沮喪して逃げ散ってしまうもので、いったん負け戦となったら、あっという間に散逸してしまう。
勝てる見込みがあり、かつ自らの身に危険が及ばない限りにおいて、戦国期の部隊は存続しうる。
近代軍隊においても、規定兵力の半数を失うと その部隊は「壊滅」と呼ばれる。
そのままでは作戦行動を起こすための戦闘単位とは見られず、再編成を要する部隊ということだろう。

戦史研究などをしていると、つい忘れがちになってしまうが、そこに居る兵の一人一人が命ある人間で、
それゆえ、集団行動においても人間的な生存本能からくる行動にさゆうされる。
伏兵や側面攻撃などで思わぬ強敵に遭遇すると、兵は動揺し、敵を倒すことより
自らの命を守るための活路を探し求め、時に部隊そのものが潰走する。


＊将と兵質 ーー デフォルトで決定している定数。
当時の足軽(兵卒)は扶持米で雇われた被雇用者なので、その家に忠誠心などはない。
士分からは主家の領地から分け与えられた知行地を持つ直属の家臣である。

足軽たちの関心は戦場働きで敵の雑兵の首を持ち帰り、戦後の恩賞に預かることである。
そのため足軽たちは将領の力量には敏感で、自分の属す将領の力量次第で良き戦場に恵まれるか、
自分たちの命を落とすことになるかが左右される。

戦国期にもよく知られていた兵質というのは不思議なもので、
都市部や商業地の兵は弱く、山岳や辺鄙な田舎の兵ほど強いとされていた。
甲斐信濃を領した武田の兵は戦国最強と言われていたし、徳川家の三河武士の名も轟いている。

兵質は血筋などの遺伝とは関係ないらしく、秀吉が天下を取ったときの精鋭を「七手組」と称して親衛隊としたが
その子の代には薄化粧などをする軟弱な集団として秀頼の親衛隊をしていたし、
徳川家が天下を簒奪したあとも、三河武士団の「旗本八万騎」を常備軍として江戸に住まわせたが、
幕末、この旗本の子孫は「お殿様」などと呼ばれる身分として育ったため何の役にも立たず、
いざ戦さの号令があっても、こぞって隠居届を出し幼少の当主に家督を譲ってしまった。

兵質とは育った環境が恵まれていないほど、野性を残した猛兵になっていくのだろうか。


◆第１段階アルゴリズム ーー 兵士数、士気、将質、兵質のみを使った戦闘計算
＊戦闘直前の士気沮喪・士気高揚
敵を目の前にしたら誰しも ひるむものだが、弱将と足軽たちに思われている将のもとではその影響は大きくなる。
良将は自らの気概をすらりと兵卒の端々まで移して顔色まで統一されるという。
また兵たちも良将に対し半神的な畏敬の念を持つとも言われ、敵に接して ひるむこと少なく向かっていけるだろう。
それが将たる者の不思議さである。

また名前の先頭に付くマークは主将・副将を表す

将質30以下の備 -> 士気 -200
将質70以下の備 -> 士気 -100
◎主将 -> 士気 +500 (上限も加算)
〇副将 -> 士気 +200 (上限も加算)


＊混乱・潰走の基準
士気はどの備も最初は1000ずつ士気があるのだが、戦闘中に少しずつ減少していき、
士気が低くなると混乱や潰走をする。
混乱や潰走のしやすさは、将質・兵質に関係がある。

divQuality 戦力値＝将質＋兵質

意外な敵や、被害の大きいときは現在の士気に関係なく混乱
士気 300以下 -> 混乱 -> 戦力値が大きいほど混乱からの回復が早い
士気 100以下 -> 潰走

戦闘中の士気低下に、戦力値は大きく影響するが、潰走の可能性はどの備にも存在する


＊攻撃側・防御側
攻撃側は自らの陣を出て敵陣を侵襲するわけであるから、兵の損耗はその分 激しくなる。
防御側は陣地の一時的な防御構造に依って戦闘をするので兵の損耗は少なめ。
一般的に、攻撃側の兵数が多く、陣の防御構造を破れれば、攻撃側の士気は大いに揚がり、防御側の士気は凋落する。
防御構造を初期兵数の10％とし、戦闘結果の防御側損耗の50％を吸収してくれるが、
その分防御構造は減耗する。０になると「陣の突破」とし上記の処理をする。
破陣後は当然ながら防御側の損耗は通常通りである。


西軍と東軍のどちらが攻撃側かをシナリオのシーンごとに攻勢・守勢を定義。
いずれは備ごとの攻勢・守勢が切り替えられるようにする (移動の概念以降)
(Corpsフィールドの「victory 勝勢」は戦場全体の旗色の良さを示すパラメータで この項の攻勢・守勢とは関係がない。
勝勢は、シナリオ後半での士気低下、潰走のしやすさに影響するが、第一段階のアルゴリズムでは捨象。)


◆兵力比１：１の戦闘結果表
＊ボードゲーム・シミュレーションの例
ボードゲームにもシミュレーションゲームというものがあって、そこでの戦闘計算は、
まず「攻撃側：防衛側」の戦力比を取り、端数は防御側有利として切り捨てて１：１とか２：１とかの比を出す。
その後、サイコロを２個振って合計値を出し、戦闘結果表という表を見る。
そこには１：１の欄は勝敗が均等に、２：１(攻撃側２倍)の欄には、攻撃側優勢の結果が並んでおり、
先ほどのサイコロ結果によって結果が決まる。

兵力優勢でもサイコロの目次第では、防衛側が勝つこともあるし、「相殺」といって両者相討ちという結果もある。
サイコロの目だけでなく、たとえば包囲されているとか、２方向からの攻撃とかで
サイコロの目に修正値として「＋３」「＋２」とかの修正を加えた結果が出る。
防衛側も地形効果修正値があるので、城郭や要塞に籠る場合は強靭な強さを発揮する。

ただし、ボードゲームの限界はその駒が無くなるか撤退するかの結果しかなく(混乱や不活性化というのもあったが)
兵士数や士気と言った数値的な減少としての結果が登場したのはコンピューターゲームになって以降の話だろう。


＊サイコロ２個方式
レトロなボードゲームの戦闘結果表システムを採用してサイコロ２個方式とする。
ここで注意すべき点は Random.nextInt(12) の一本でサイコロ２個分を表現してはいけない。
Random.nextInt(6) を２回やって結果を合計すべきである。
なぜサイコロを１個ではなく２個使うか、１個だけだと どの目も確率1/6で均等なのに対し、
サイコロ２個の場合は中央値の７が一番出やすく、端の２と12が いちばん出にくい値となる。
簡易的な正規分布をサイコロ２個だけで作り出せるのだ。昔のひとはよく考え出したものだ。


＊結果表を配列にする
「ランダム計＋修正値」で、配列の結果を取り出し、その結果を分岐させて数値処理
Random.nextInt(6)は 0～5の乱数を生成するので ２回の合計で 0～10の11通り

〔兵数比１：１〕中央値の5を中心に左右対称に分布。
index:   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10
String[]{"AE", "AR", "AR", "EX", "EX", "EX", "EX", "EX", "DR", "DR", "DE"};

〔用語説明〕
    ・"EX" 「相殺」を表す。EXは戦果も一進一退で両者に決め手はなく、損耗も少ない。
    ・"-R" 士気低下を伴う、損耗中
    ・"-E" 会心の一撃にあたる損耗大。士気凋落。場合によっては混乱する
    ・"A-" 攻撃側の意。損耗は両者に発生するが「A」側の損害が大きかったことを表す。
    ・"D-" 防御側の意。損耗は両者に発生するが「D」側の損害が大きかったことを表す。


〔修正値〕Randomサイコロ２個の結果に、下記の修正値を加算して決定 [IndexOutOfBoundsExceptionに注意]
・「戦力値(＝将質＋兵質)の差 / 40 」-> 例 [(朝倉景鏡42 + 朝倉兵質60) - (〇本多忠勝99 + 徳川兵質90)]/40
                                     = (102 - 189) / 40 = -87 / 40 = -2.175 ≒ -2 (小数点以下 切り捨て)

                                  -> 例 [(宮部継潤42 + 浅井兵質50)-(佐久間信盛28 + 織田兵質40)] / 40
                                     = (92 - 68) / 40 = 24 / 40 = 0.6 ≒ 0 (小数点以下 切り捨て)

    ※「/ 40」の考え方
    戦力値だけで戦闘結果が決まってしまうと面白くないので極端な例として本多忠勝さんで検証。
    「/10」だと -8、「/20」でも -4。これだとほぼ勝ち目ないので、更に半分の「/40」にしました。
    バランス調整的な理由なので、この値は必要に応じて変えても良い。


・士気差 / 400  士気の差を取って400の差ごとに ±1

・◎主将: ±2

・〇副将: ±1

・２将による(２方向からの)攻撃 +2

・渡河攻撃 -2


〔兵数比１：１〕中央値の5を中心に左右対称に分布。
index:   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10
String[]{"AE", "AR", "AR", "EX", "EX", "EX", "EX", "EX", "DR", "DR", "DE"};

〔兵数比 1.5：１〕攻撃側 1.5倍の優勢
index:   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10
String[]{"AE", "AR", "AR", "EX", "EX", "EX", "EX", "DR", "DR", "DR", "DE"};

〔兵数比 ２：１〕攻撃側 ２倍の優勢
index:   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10
String[]{"AE", "AR", "EX", "EX", "EX", "DR", "DR", "DR", "DR", "DR", "DE"};

〔兵数比 ３：１〕以上 攻撃側 ３倍以上の優勢
index:   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10
String[]{"AR", "EX", "EX", "EX", "DR", "DR", "DR", "DR", "DR", "DE", "DE"};

〔兵数比 １：1.5〕防御側 1.5倍の優勢 (攻撃側 劣勢 0.75 :１)
index:   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10
String[]{"AE", "AR", "AR", "AR", "EX", "EX", "EX", "EX", "DR", "DR", "DE"};

〔兵数比 １：２〕以上 防御側 ２倍以上の優勢 (攻撃側 劣勢 0.5 :１)
index:   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10
String[]{"AE", "AE", "AR", "AR", "AR", "AR", "EX", "EX", "EX", "DR", "DR"};



