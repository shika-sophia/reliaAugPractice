■制作日誌
◆初日 2020-09-14
・クラス設計
・package作成

◆２日目 2020-09-15
・設計見直し。
    ・HEX移動方式の廃止。-> 固定陣形・固定対戦方式にする。
    ・Ratable(寝返り)インターフェイスの廃止。
    ・Eventableインターフェイス設置。(未記入)
・Divisionクラス作成
・AzaiCorpsクラスを作成 -> Divisionクラスのインスタンスを格納するListを作成。
・それに合わせて AbstractCorpsを修正。
・「ReadMe.txt」を作成。「BattleGame.java」の java_docsを分離して ReadMeへ転記。

・【考察】
super, 抽象クラスをあまりうまく使えていない。
具体的な子クラスに合わせて抽象クラスのほうを書き換えているし、あまり役に立っていない。
フィールドもインスタンスするからsuperより子クラスに置いておいたほうが使いやすいし・・。

オプションにしたイベント実装DivisionXxxxとなったら、親のDivisionからフィールド引き継いで
継承の意味は出てくると思う。てか、オプションしないと要件定義を満たせないから、ここまではやろう。

でも２日目で、だいぶ概要ができてきた。
当初は HEX(六角形のマス)の移動方式を考えていたけど、
戦闘には正面方向や包囲・隣接状況がとても影響するので大事な要素なのだが、
これは いずれやることにして、まずは戦闘計算ＡＩを作ってみよう。


◆３日目 2020-09-16
＊package追加
・[[package ～.test:]]
    BattleGame.main()は本番実行用なので、
    各種テストはこちらにTestMain.main()を作ってテストします。
    テスト結果をどこに保存しとこうか・・模索中

・[[package ～.view:]]
    BattleGame.main()は 司令塔control機能に特化して
    表示や動きを出すクラスをまとめて、このパッケージに分類。

＊AzaiCorpsとDivisionのプリントテスト [test.PrintDivisionTest]
    main()でAzaiCorps, List<Division>をインスタンスして、
    軍団と個別のDivisionを取り出してフィールドを表示。
    パラメータを変化させて、ちゃんとデータを保持しているか確認。

    勢  力: 浅井勢
    侍大将: ◎浅井長政
    戦闘力: 68
    兵  力: 4000
    士  気: 1000

    勢  力: 浅井勢
    侍大将: 〇磯野員昌
    戦闘力: 75
    兵  力: 2000
    士  気: 1000

    勢  力: 浅井勢
    侍大将: 阿閉貞秀
    戦闘力: 54
    兵  力: 1000
    士  気: 1000

    勢  力: 浅井勢
    侍大将: 宮部継潤
    戦闘力: 42
    兵  力: 1000
    士  気: 1000
    ----------------
    //---- Test 宮部備の兵力 -24 士気 -158 ----
    勢  力: 浅井勢
    侍大将: 宮部継潤
    戦闘力:   42
    兵  力:  976
    士  気:  842
    ----------------

    【課題】Thread.sleep(500);で 暫時表示はできるが、
        同じ場所に数値だけ変えて表示したい。

＊制作日誌を [[package ～.reference]]に移転
    この記事、膨大な文量になりそうなので、
    [ReadMe.txt]のほうは要件やクラス設計などシステム面の紹介のみ。

＊織田軍団 [corps.OdaCorps]クラス作成
    データを変えるだけで、システム同じまま行けました。
    あとはインスタンスをポコポコと量産してくれます。

＊浅井勢と織田勢の並立表示をテスト [test.Print2CorpsTest]
勢  力: 浅井勢            勢  力: 織田勢
侍大将: ◎浅井長政        侍大将: ◎織田信長
戦闘力:         68        戦闘力:         96
兵  力:       4000        兵  力:       7000
士  気:       1000        士  気:       1000

勢  力: 浅井勢            勢  力: 織田勢
侍大将: 〇磯野員昌        侍大将: 〇柴田勝家
戦闘力:         75        戦闘力:         88
兵  力:       2000        兵  力:       4000
士  気:       1000        士  気:       1000

勢  力: 浅井勢            勢  力: 織田勢
侍大将:  阿閉貞秀        侍大将:  明智光秀
戦闘力:         54        戦闘力:         82
兵  力:       1000        兵  力:       2000
士  気:       1000        士  気:       1000

勢  力: 浅井勢            勢  力: 織田勢
侍大将:  宮部継潤        侍大将:  木下秀吉
戦闘力:         42        戦闘力:         65
兵  力:       1000        兵  力:       2000
士  気:       1000        士  気:       1000

                   勢  力: 織田勢
                   侍大将:  池田恒興
                   戦闘力:        37
                   兵  力:      2000
                   士  気:      1000


                   勢  力: 織田勢
                   侍大将: 佐久間信盛
                   戦闘力:        28
                   兵  力:      2000
                   士  気:      1000

【考察】
全角と半角の違いで ちょっとずつズレているけど、
そこは Viewで調整するとして、数値だけ変えて同じ場所に表示するのは
jspファイルを使わないと無理なような・・


◆４日目 2020-09-18
＊Java機能のネット調査「Java 座標 移動」など
    => reference.座標指定(java_awt_Point).txt

＊座標の指定 上記課題、同じ場所での表示や動きを出すのに必要

＊モジュールのこと解ってなかったので少し学習
    => reference.Module抜粋メモ

＊Swing系のレイアウトコードをいくつかコピーして実行してみた。
    [reference.MousePointerSample]
    [reference.BorderSample]
    [reference.BoxLayoutSample]

    キリがないから、この辺りにして、休みの間にSwingの勉強をします。
    これを使うとServletとJSPを使わなくても、このアプリで私のしたい表示ができる。

＊[view.Centuria]
    viewパッケージに、兵力の規模に応じて■■■マークの数で表す駒を作成するクラス。
    (作成途中)

【考察】
今日は調べものに ほとんど費やしてしまった。
でも、Swingで私のしたいレイアウトができそうなので、調べた甲斐はあった。
コードのほうが、今日はあまり書けずに残念だったが、具体的にやることが見えてきたので
あとはそれを形にして行こう。

レイアウトは両脇に浅井勢や織田勢データを四角の枠で囲って表示し、
中央は ■  ×  □ こんな感じの駒の衝突を描ければと・・
       ■◆×〇□
  宮部 ■  ×  □ 柴田


(休日もやらないと提出納期に間に合わないので、お許しを・・)
◆５日目 2020-09-19 (土) 休日
＊上記 [view.Centuria] -> 改名[view.Manipulus]
＊Manipulusが途中だったので、それを仕上げる。
＊引数に (int power, boolean west)を渡すメソッドに変更
    power: 兵力 -> ■の規模を決める
    west: 西軍か東軍か -> ■, □かで表示

◆６日目 2020-09-20 (日) 休日
＊[reference.座標指定～] -> 改名[reference.Swing資料]
    ・以前は抜粋のみだったが、全文掲載に変更
    ・「Swingを使ったアプリケーションとは」など基礎になる記事を追加
    ・「◆INDEX Swingを使ってみよう」という記事一覧があったので追加
        https://www.javadrive.jp/tutorial/

＊[view.BattleGameView]を作成し、Swingを利用して実装を開始


◆７日目 2020-09-22 (火) 休日
＊[view.Manipulus] Divisionリストから、名前,兵力,士気付きのManipulusを生成

＊[view.BattleGameView] Divisionテキストと Manipulusを表示できるように実装
    ・【課題】panelを複数に分ける -> なぜか panelが上書きされてしまい複数パネルを並べられない。
    ・【課題】テキストエリアの並立配置 -> setLayout(BoxLayout(～, BoxLayout.X_AXIS));
    ・【課題】テキストエリア内のセンタリング
    ・いろいろ課題山積・・

    ・今日時点でのViewは[view.BattleGameView2020-09-22.jpg]参照

＊明日以降の 「To Do List」
    ・シナリオ作成 Scene1 開戦, Scene5 榊原側面に迂回突撃 のみ実装
    ・戦闘ロジックのアルゴリズム -> まずはテキストファイルで考える
    ・上記アルゴリズムを [[logicパッケージ]]に実装
    ・各クラスを [book2General.BattleGame.main()]からのコントロールで繋げる

【考察】提出期限１週間前で焦ってきました。実装できるんかなぁ。
  Swingが調べながらで重いんだよな。とても勉強にはなるけど・・
  明日はSwingを少し寝かせて、シナリオと戦闘ロジックのできるとこからやっていこうか


◆８日目 2020-09-23 (水)
＊[logic.シナリオ設定.txt]
    ・シナリオ設定をテキストファイルで定義

＊[corps.AsakraCorps]
＊[corps.TokugwaCorps]
    ・途中だった朝倉軍団と徳川軍団を整備

＊[book2General.BattleGame.main()]
    ・４軍団のインスタンスと軍団リストの生成
    ・どこかに軍団リストを保持する必要があることに気付き、
    メインコントロールである、このクラスのフィールドにリスト保管場所を作る。

＊[logic.Scenario]
    ・上記[logic.シナリオ設定.txt]のコード実装
    ・【課題】どのようにシナリオ設定の情報を持っていくかで混乱中
        ＃リストにStringを並べて、split()で分割してList<Division>にするか
        ＃List<Division>だけ Viewに渡して Viewでシナリオ場合分けして
        インスタンス取り出したほうが早いような・・

【考察】
シナリオ設定テキストファイルに熱心になりすぎてしまった。
[logic.Scenario]もまだ未完成だが、これを解決してから
明日は戦闘アルゴリズムも考えないと


◆９日目 2020-09-24 (木) 休日
＊[logic.Scenario]を仕上げ
    ・フィールドにシナリオ情報を保持して、使うときにフィールドからgetする
    ・インスタンスの回数でカウントして、シーン番号に代入し、場合分け
    ・登場武将は、List<String>に入っているので、viewで取り出し、各々 List<Division>にする


◆10日目 2020-09-26 (土) 休日
＊[logic.戦闘アルゴリズム.txt]を作成
    ・戦闘計算に使う考え方をまずはテキストファイルで整理しようと作成
    ・兵士数、士気、将質、兵質の４つのパラメータを用いた単純モデルを作る
    ・戦闘時の計算をどうするか詰まって模索中


◆11日目 2020-09-27 (日) 休日
＊[logic.戦闘アルゴリズム.txt]を追記
    ・戦闘計算を具体的に決めることができ、結果表の配列を定義
    ・【課題】必要なメソッドは
        ＃Random.nextInt(5)を２回して合計
        ＃修正値の計算
        ＃結果表配列を定義して、上記の２つの数値を当てはめ戦闘結果を決定
        ＃戦闘結果 "EX","DR","DE","AR","AE"から switch文で分岐し数値処理
        ＃混乱判定 戦闘結果によって混乱する場合がある
        ＃混乱状態の定義
        ＃混乱回復の判定
        ＃潰走判定, 潰走状態の定義, 潰走からの回復


     ・【課題】戦闘結果を[view]に戻して、再表示する Fhase(フェイズ)を +1
     ・これで、そのままコードに書いていけそうなところまで具体化できたと思う

【考察】
残り２日で提出期限となり、全体的な完成度は35％。
２週間掛けて休日もできる限り課題制作に充てたのだが、まだまだ時間が足りない。
せめて[view]だけでも、しっかりできて、ある程度のデモ表示ができれば良かったが・・

失敗の原因は、今の実力で取り組める範囲と規模を見誤って、巨大なプロジェクトを構想して始めてしまったことだろう。
出射さんの出題課題も「extends, implments, superを用いた３ファイル以上」というものだったから、
こんなに大規模のものを作り始めるとは思っておられなかったであろう。

あっ、明日 [corps.Sakakibara extends Division implements Eventable]クラスを作らなきゃ。これ要件定義だから。

途中でもボヤいたけど、Swingが大変で、今でも[view]が途中で止まっていて完成していない。
でも、そういえば「ゲームするなら Swing勉強しないと・・」と前に先生が言っていた、あれか。やっと出会ったわ。Swing。
これは、本１冊をじっくり読み込むぐらいの勉強せんと、自分の好きな表現するのは難しかろう。
いずれ、ここは必ず習得すると決意して、今回の課題が途中になってしまったことは大いに反省すべきだ。

これが、フリーのプログラマーとして、お客さまのお仕事の納品期限だったとしたら、「できませんでした。すみません」
なんてことは言えないのだから。
でも、実際のプログラマーになったら、自分の好きなものを とことん作りこむなんて体験もまたできないだろうから、
こういう、とても貴重な時間を与えてくださった リリアさん、出射さんに本当に感謝です。

あと２日、未完成ながらも、できるだけのことはやろう。
まず、要件定義の Eventable実装。
それと[logic.BattleLogic]のアルゴリズムは今日だいたい概要ができたから、それをコードに実装してみよう。


◆12日目 2020-09-28 (月)
＊【出射さんアドバイス】
    (出射さん)
    出来上がってから説明するつもりだったのですが、
    ○○Corpsクラス類なんですが、これらは共通のフィールドを持っているので、
    オブジェクト指向として捉えて設計したほうがよいかと思います。

    つまり、
    class Corps {
        belong
        soliderQuality
        powerTotal
        victory
        divisionNum
    }

    このように設計し、織田軍とかの詳細な情報はコンストラクターから受け取った引数で行うのが良いかと

    現状だと、他のフィールドを追加する場合に全ての○○Corpsクラスに追加しないといけないので、
    後々の修正箇所が増えてしまいます。

    (大鹿)
    あっ同じことを何回も書いてました。
    そういうのをsuperにまとめるのですね。
    その辺りが私はまだ理解不足でして、残り日数で　さっそく修正してみます。
    アドバイスありがとうございます。


    (出射さん) 9:46
    あとは○○Corps細かめの情報はテキストファイルにまとめてデータベース的に行う方が良さそうですね、

            //データ(belong, name, general, power)
            List<String> kagetakeList = new ArrayList<>(
                Arrays.asList(belong, "◎朝倉景建","23","4000"));

            List<String> kagenoriList = new ArrayList<>(
                Arrays.asList(belong, "〇朝倉景紀","31","2000"));

            List<String> magaraList = new ArrayList<>(
                Arrays.asList(belong, "真柄直隆","71","1000"));

            List<String> maenamiList = new ArrayList<>(
                Arrays.asList(belong, "前波吉継","64","1000"));

            List<String> kageakiraList = new ArrayList<>(
                Arrays.asList(belong, "朝倉景鏡","42","2000"));

    この辺りはテキストファイルから拾ってくる形式がベターかなと思います。


    (大鹿)9:51
    データベースというとSQL文で入れようかと思ったのですが、
    相手のかたの実行環境が整わないと使えないと思っていたのですが、
    テキストファイルでできるのですね。あのFileReaderですね。これもやってみます。


＊上記アドバイスを受けて、その実装を行いました
＊[corps]パッケージは旧版のまま残置
＊[corpsRevision]を新たに立ち上げて実装しました
    ・[GeneralDatabase.txt] 武将データを１枚のテキストファイルにまとめました。
    ・[Crops] 軍団クラスを一般化して作成。
        抽象クラスだとインスタンスできないので一般クラスとして。
    ・[Division]はそのままコピー
    ・[ExecuteCorps]
        main()から実行できるようにしてテスト。
        FileReaderから[GeneralDatabase.txt]を読み込み、
        split()で分割、その値でインスタンス。フィールドに保持

＊[corpsRevision.Sakakibara extends Division implements Eventable]を作成
    ・[Division]に既存のDivisionを用いるコンストラクタを追加
    ・イベント用の処理(兵力増援,士気高揚)を実装


【出射さん感想】
(出射さん) 17:10
良くなってます！

僕、歴オタじゃないんでなんともですけど、
こういうのは無限に翻案で世界史編とかに流用できるのが理想だと思うので
ソースコード上から一切の固有名詞を排除するってのが最終目標ですかね
同じコードで、読み込むファイルだけで他のバージョンに変更できるようになるのが理想です。

(大鹿) 17:17
おぉ世界史版。固有名詞を廃してデータのみ読み込む。
そうすれば他にも転用できますね。
現状は変数名などに固有名詞が残っていますが、
プログラムの作り方、そうやって作っていくのですね。


