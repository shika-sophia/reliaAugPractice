■制作日誌
◆初日 2020-09-14
・クラス設計
・package作成

◆２日目 2020-09-15
・設計見直し。
    ・HEX移動方式の廃止。-> 固定陣形・固定対戦方式にする。
    ・Ratable(寝返り)インターフェイスの廃止。
    ・Eventableインターフェイス設置。(未記入)
・Divisionクラス作成
・AzaiCorpsクラスを作成 -> Divisionクラスのインスタンスを格納するListを作成。
・それに合わせて AbstractCorpsを修正。
・「ReadMe.txt」を作成。「BattleGame.java」の java_docsを分離して ReadMeへ転記。

・【考察】
super, 抽象クラスをあまりうまく使えていない。
具体的な子クラスに合わせて抽象クラスのほうを書き換えているし、あまり役に立っていない。
フィールドもインスタンスするからsuperより子クラスに置いておいたほうが使いやすいし・・。

オプションにしたイベント実装DivisionXxxxとなったら、親のDivisionからフィールド引き継いで
継承の意味は出てくると思う。てか、オプションしないと要件定義を満たせないから、ここまではやろう。

でも２日目で、だいぶ概要ができてきた。
当初は HEX(六角形のマス)の移動方式を考えていたけど、
戦闘には正面方向や包囲・隣接状況がとても影響するので大事な要素なのだが、
これは いずれやることにして、まずは戦闘計算ＡＩを作ってみよう。


◆３日目 2020-09-16
＊package追加
・[[package ～.test:]]
    BattleGame.main()は本番実行用なので、
    各種テストはこちらにTestMain.main()を作ってテストします。
    テスト結果をどこに保存しとこうか・・模索中

・[[package ～.view:]]
    BattleGame.main()は 司令塔control機能に特化して
    表示や動きを出すクラスをまとめて、このパッケージに分類。

＊AzaiCorpsとDivisionのプリントテスト [test.PrintDivisionTest]
    main()でAzaiCorps, List<Division>をインスタンスして、
    軍団と個別のDivisionを取り出してフィールドを表示。
    パラメータを変化させて、ちゃんとデータを保持しているか確認。

    勢  力: 浅井勢
    侍大将: ◎浅井長政
    戦闘力: 68
    兵  力: 4000
    士  気: 1000

    勢  力: 浅井勢
    侍大将: 〇磯野員昌
    戦闘力: 75
    兵  力: 2000
    士  気: 1000

    勢  力: 浅井勢
    侍大将: 阿閉貞秀
    戦闘力: 54
    兵  力: 1000
    士  気: 1000

    勢  力: 浅井勢
    侍大将: 宮部継潤
    戦闘力: 42
    兵  力: 1000
    士  気: 1000
    ----------------
    //---- Test 宮部備の兵力 -24 士気 -158 ----
    勢  力: 浅井勢
    侍大将: 宮部継潤
    戦闘力:   42
    兵  力:  976
    士  気:  842
    ----------------

    【課題】Thread.sleep(500);で 暫時表示はできるが、
        同じ場所に数値だけ変えて表示したい。

＊制作日誌を [[package ～.reference]]に移転
    この記事、膨大な文量になりそうなので、
    [ReadMe.txt]のほうは要件やクラス設計などシステム面の紹介のみ。

＊織田軍団 [corps.OdaCorps]クラス作成
    データを変えるだけで、システム同じまま行けました。
    あとはインスタンスをポコポコと量産してくれます。

＊浅井勢と織田勢の並立表示をテスト [test.Print2CorpsTest]
勢  力: 浅井勢            勢  力: 織田勢
侍大将: ◎浅井長政        侍大将: ◎織田信長
戦闘力:         68        戦闘力:         96
兵  力:       4000        兵  力:       7000
士  気:       1000        士  気:       1000

勢  力: 浅井勢            勢  力: 織田勢
侍大将: 〇磯野員昌        侍大将: 〇柴田勝家
戦闘力:         75        戦闘力:         88
兵  力:       2000        兵  力:       4000
士  気:       1000        士  気:       1000

勢  力: 浅井勢            勢  力: 織田勢
侍大将:  阿閉貞秀        侍大将:  明智光秀
戦闘力:         54        戦闘力:         82
兵  力:       1000        兵  力:       2000
士  気:       1000        士  気:       1000

勢  力: 浅井勢            勢  力: 織田勢
侍大将:  宮部継潤        侍大将:  木下秀吉
戦闘力:         42        戦闘力:         65
兵  力:       1000        兵  力:       2000
士  気:       1000        士  気:       1000

                   勢  力: 織田勢
                   侍大将:  池田恒興
                   戦闘力:        37
                   兵  力:      2000
                   士  気:      1000


                   勢  力: 織田勢
                   侍大将: 佐久間信盛
                   戦闘力:        28
                   兵  力:      2000
                   士  気:      1000

【考察】
全角と半角の違いで ちょっとずつズレているけど、
そこは Viewで調整するとして、数値だけ変えて同じ場所に表示するのは
jspファイルを使わないと無理なような・・


◆４日目 2020-09-18
＊Java機能のネット調査「Java 座標 移動」など
    => reference.座標指定(java_awt_Point).txt

＊座標の指定 上記課題、同じ場所での表示や動きを出すのに必要

＊モジュールのこと解ってなかったので少し学習
    => reference.Module抜粋メモ

＊Swing系のレイアウトコードをいくつかコピーして実行してみた。
    [reference.MousePointerSample]
    [reference.BorderSample]
    [reference.BoxLayoutSample]

    キリがないから、この辺りにして、休みの間にSwingの勉強をします。
    これを使うとServletとJSPを使わなくても、このアプリで私のしたい表示ができる。

＊[view.Centuria]
    viewパッケージに、兵力の規模に応じて■■■マークの数で表す駒を作成するクラス。
    (作成途中)

【考察】
今日は調べものに ほとんど費やしてしまった。
でも、Swingで私のしたいレイアウトができそうなので、調べた甲斐はあった。
コードのほうが、今日はあまり書けずに残念だったが、具体的にやることが見えてきたので
あとはそれを形にして行こう。

レイアウトは両脇に浅井勢や織田勢データを四角の枠で囲って表示し、
中央は ■  ×  □ こんな感じの駒の衝突を描ければと・・
       ■◆×〇□
  宮部 ■  ×  □ 柴田




